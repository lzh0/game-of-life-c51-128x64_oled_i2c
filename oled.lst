C51 COMPILER V9.60.0.0   OLED                                                              05/18/2020 17:10:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN oled.obj
COMPILER INVOKED BY: D:\keil_c51\C51\BIN\C51.EXE SRC\oled.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\SRC) DEBUG OBJECTEXT
                    -END PRINT(.\oled.lst) TABS(2) OBJECT(oled.obj)

line level    source

   1          
   2          #include "oled.h"
   3          //#include "stdlib.h"
   4          //#include "oledfont.h"    
   5          //#include "delay.h"
   6          //OLED的显存
   7          //存放格式如下.
   8          //[0]0 1 2 3 ... 127  
   9          //[1]0 1 2 3 ... 127  
  10          //[2]0 1 2 3 ... 127  
  11          //[3]0 1 2 3 ... 127  
  12          //[4]0 1 2 3 ... 127  
  13          //[5]0 1 2 3 ... 127  
  14          //[6]0 1 2 3 ... 127  
  15          //[7]0 1 2 3 ... 127      
  16          
  17          
  18          
  19          
  20          
  21          void delay_ms(unsigned int ms)
  22          {                         
  23   1        unsigned int a;
  24   1        while(ms)
  25   1        {
  26   2          a=1800;
  27   2          while(a--);
  28   2          ms--;
  29   2        }
  30   1        return;
  31   1      }
  32          /**********************************************
  33          //IIC Start
  34          **********************************************/
  35          void IIC_Start()
  36          {
  37   1      
  38   1        OLED_SCLK_Set() ;
  39   1        OLED_SDIN_Set();
  40   1        OLED_SDIN_Clr();
  41   1        OLED_SCLK_Clr();
  42   1      }
  43          
  44          /**********************************************
  45          //IIC Stop
  46          **********************************************/
  47          void IIC_Stop()
  48          {
  49   1      OLED_SCLK_Set() ;
  50   1      //  OLED_SCLK_Clr();
  51   1        OLED_SDIN_Clr();
  52   1        OLED_SDIN_Set();
  53   1        
  54   1      }
C51 COMPILER V9.60.0.0   OLED                                                              05/18/2020 17:10:50 PAGE 2   

  55          
  56          void IIC_Wait_Ack()
  57          {
  58   1      
  59   1        //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为上拉输入模式
  60   1        //GPIOB->CRH |= 0x00080000;
  61   1      //  OLED_SDA = 1;
  62   1      //  delay_us(1);
  63   1        //OLED_SCL = 1;
  64   1        //delay_us(50000);
  65   1      /*  while(1)
  66   1        {
  67   1          if(!OLED_SDA)       //判断是否接收到OLED 应答信号
  68   1          {
  69   1            //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为通用推免输出模式
  70   1            //GPIOB->CRH |= 0x00030000;
  71   1            return;
  72   1          }
  73   1        }
  74   1      */
  75   1        OLED_SCLK_Set() ;
  76   1        OLED_SCLK_Clr();
  77   1      }
  78          /**********************************************
  79          // IIC Write byte
  80          **********************************************/
  81          
  82          void Write_IIC_Byte(unsigned char IIC_Byte)
  83          {
  84   1        unsigned char i;
  85   1        unsigned char m,da;
  86   1        da=IIC_Byte;
  87   1        OLED_SCLK_Clr();
  88   1        for(i=0;i<8;i++)    
  89   1        {
  90   2          m=da;
  91   2          //  OLED_SCLK_Clr();
  92   2          m=m&0x80;
  93   2          if(m==0x80){OLED_SDIN_Set();}
  94   2          else OLED_SDIN_Clr();
  95   2          da=da<<1;
  96   2          OLED_SCLK_Set();
  97   2          OLED_SCLK_Clr();
  98   2          }
  99   1      }
 100          /**********************************************
 101          // IIC Write Command
 102          **********************************************/
 103          void Write_IIC_Command(unsigned char IIC_Command)
 104          {
 105   1         IIC_Start();
 106   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
 107   1        IIC_Wait_Ack(); 
 108   1         Write_IIC_Byte(0x00);      //write command
 109   1        IIC_Wait_Ack(); 
 110   1         Write_IIC_Byte(IIC_Command); 
 111   1        IIC_Wait_Ack(); 
 112   1         IIC_Stop();
 113   1      }
 114          /**********************************************
 115          // IIC Write Data
 116          **********************************************/
C51 COMPILER V9.60.0.0   OLED                                                              05/18/2020 17:10:50 PAGE 3   

 117          void Write_IIC_Data(unsigned char IIC_Data)
 118          {
 119   1        IIC_Start();
 120   1        Write_IIC_Byte(0x78);     //D/C#=0; R/W#=0
 121   1        IIC_Wait_Ack(); 
 122   1        Write_IIC_Byte(0x40);     //write data
 123   1        IIC_Wait_Ack(); 
 124   1        Write_IIC_Byte(IIC_Data);
 125   1        IIC_Wait_Ack(); 
 126   1        IIC_Stop();
 127   1      }
 128          void OLED_WR_Byte(unsigned dat,unsigned cmd)
 129          {
 130   1        if(cmd)
 131   1            {
 132   2      
 133   2         Write_IIC_Data(dat);
 134   2         
 135   2          }
 136   1        else {
 137   2         Write_IIC_Command(dat);
 138   2          
 139   2        }
 140   1      
 141   1      
 142   1      }
 143          
 144          
 145          
 146          /***********************Delay****************************************/
 147          void Delay_50ms(unsigned int Del_50ms)
 148          {
 149   1        unsigned int m;
 150   1        for(;Del_50ms>0;Del_50ms--)
 151   1          for(m=6245;m>0;m--);
 152   1      }
 153          
 154          void Delay_1ms(unsigned int Del_1ms)
 155          {
 156   1        unsigned char j;
 157   1        while(Del_1ms--)
 158   1        { 
 159   2          for(j=0;j<123;j++);
 160   2        }
 161   1      }
 162          
 163          //坐标设置
 164          
 165            void OLED_Set_Pos(unsigned char x, unsigned char y) 
 166          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
 167   1        OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 168   1        OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 169   1      }       
 170          //开启OLED显示    
 171          void OLED_Display_On(void)
 172          {
 173   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 174   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 175   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 176   1      }
 177          //关闭OLED显示     
 178          void OLED_Display_Off(void)
C51 COMPILER V9.60.0.0   OLED                                                              05/18/2020 17:10:50 PAGE 4   

 179          {
 180   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 181   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 182   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 183   1      }            
 184          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 185          void OLED_Clear(void)  
 186          {  
 187   1        u8 i,n;       
 188   1        for(i=0;i<8;i++)  
 189   1        {  
 190   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 191   2          OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置―列低地址
 192   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 193   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 194   2        } //更新显示
 195   1      }
 196          void OLED_On(void)  
 197          {  
 198   1        u8 i,n;       
 199   1        for(i=0;i<8;i++)  
 200   1        {  
 201   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 202   2          OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置―列低地址
 203   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 204   2          for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 205   2        } //更新显示
 206   1      }
 207          
 208          //m^n函数
 209          u32 oled_pow(u8 m,u8 n)
 210          {
 211   1        u32 result=1;  
 212   1        while(n--)result*=m;    
 213   1        return result;
 214   1      }         
 215          
 216          
 217          //初始化SSD1306             
 218          void OLED_Init(void)
 219          {   
 220   1       
 221   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 222   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 223   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 224   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 225   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 226   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 227   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 228   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 229   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 230   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 231   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 232   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 233   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 234   1        OLED_WR_Byte(0x00,OLED_CMD);//
 235   1        
 236   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 237   1        OLED_WR_Byte(0x80,OLED_CMD);//
 238   1        
 239   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 240   1        OLED_WR_Byte(0x05,OLED_CMD);//
C51 COMPILER V9.60.0.0   OLED                                                              05/18/2020 17:10:50 PAGE 5   

 241   1        
 242   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 243   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 244   1        
 245   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 246   1        OLED_WR_Byte(0x12,OLED_CMD);//
 247   1        
 248   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 249   1        OLED_WR_Byte(0x30,OLED_CMD);//
 250   1        
 251   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 252   1        OLED_WR_Byte(0x14,OLED_CMD);//
 253   1        
 254   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 255   1      }  
 256          
 257          
 258          
 259          
 260          
 261          
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          
 274          
 275          
 276          
 277          
 278          
 279          
 280          
 281          
 282          
 283          
 284          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    694    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
