C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN oled.obj
COMPILER INVOKED BY: D:\keil_c51\C51\BIN\C51.EXE SRC\oled.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\SRC) DEBUG OBJECTEXT
                    -END PRINT(.\oled.lst) TABS(2) OBJECT(oled.obj)

line level    source

   1          
   2          #include "oled.h"
   3          //#include "stdlib.h"
   4          #include "oledfont.h"    
   5          //#include "delay.h"
   6          //OLED的显存
   7          //存放格式如下.
   8          //[0]0 1 2 3 ... 127  
   9          //[1]0 1 2 3 ... 127  
  10          //[2]0 1 2 3 ... 127  
  11          //[3]0 1 2 3 ... 127  
  12          //[4]0 1 2 3 ... 127  
  13          //[5]0 1 2 3 ... 127  
  14          //[6]0 1 2 3 ... 127  
  15          //[7]0 1 2 3 ... 127         
  16          void delay_ms(unsigned int ms)
  17          {                         
  18   1        unsigned int a;
  19   1        while(ms)
  20   1        {
  21   2          a=1800;
  22   2          while(a--);
  23   2          ms--;
  24   2        }
  25   1        return;
  26   1      }
  27          /**********************************************
  28          //IIC Start
  29          **********************************************/
  30          void IIC_Start()
  31          {
  32   1      
  33   1        OLED_SCLK_Set() ;
  34   1        OLED_SDIN_Set();
  35   1        OLED_SDIN_Clr();
  36   1        OLED_SCLK_Clr();
  37   1      }
  38          
  39          /**********************************************
  40          //IIC Stop
  41          **********************************************/
  42          void IIC_Stop()
  43          {
  44   1      OLED_SCLK_Set() ;
  45   1      //  OLED_SCLK_Clr();
  46   1        OLED_SDIN_Clr();
  47   1        OLED_SDIN_Set();
  48   1        
  49   1      }
  50          
  51          void IIC_Wait_Ack()
  52          {
  53   1      
  54   1        //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为上拉输入模式
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 2   

  55   1        //GPIOB->CRH |= 0x00080000;
  56   1      //  OLED_SDA = 1;
  57   1      //  delay_us(1);
  58   1        //OLED_SCL = 1;
  59   1        //delay_us(50000);
  60   1      /*  while(1)
  61   1        {
  62   1          if(!OLED_SDA)       //判断是否接收到OLED 应答信号
  63   1          {
  64   1            //GPIOB->CRH &= 0XFFF0FFFF; //设置PB12为通用推免输出模式
  65   1            //GPIOB->CRH |= 0x00030000;
  66   1            return;
  67   1          }
  68   1        }
  69   1      */
  70   1        OLED_SCLK_Set() ;
  71   1        OLED_SCLK_Clr();
  72   1      }
  73          /**********************************************
  74          // IIC Write byte
  75          **********************************************/
  76          
  77          void Write_IIC_Byte(unsigned char IIC_Byte)
  78          {
  79   1        unsigned char i;
  80   1        unsigned char m,da;
  81   1        da=IIC_Byte;
  82   1        OLED_SCLK_Clr();
  83   1        for(i=0;i<8;i++)    
  84   1        {
  85   2          m=da;
  86   2          //  OLED_SCLK_Clr();
  87   2          m=m&0x80;
  88   2          if(m==0x80){OLED_SDIN_Set();}
  89   2          else OLED_SDIN_Clr();
  90   2          da=da<<1;
  91   2          OLED_SCLK_Set();
  92   2          OLED_SCLK_Clr();
  93   2          }
  94   1      }
  95          /**********************************************
  96          // IIC Write Command
  97          **********************************************/
  98          void Write_IIC_Command(unsigned char IIC_Command)
  99          {
 100   1         IIC_Start();
 101   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
 102   1        IIC_Wait_Ack(); 
 103   1         Write_IIC_Byte(0x00);      //write command
 104   1        IIC_Wait_Ack(); 
 105   1         Write_IIC_Byte(IIC_Command); 
 106   1        IIC_Wait_Ack(); 
 107   1         IIC_Stop();
 108   1      }
 109          /**********************************************
 110          // IIC Write Data
 111          **********************************************/
 112          void Write_IIC_Data(unsigned char IIC_Data)
 113          {
 114   1        IIC_Start();
 115   1        Write_IIC_Byte(0x78);     //D/C#=0; R/W#=0
 116   1        IIC_Wait_Ack(); 
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 3   

 117   1        Write_IIC_Byte(0x40);     //write data
 118   1        IIC_Wait_Ack(); 
 119   1        Write_IIC_Byte(IIC_Data);
 120   1        IIC_Wait_Ack(); 
 121   1        IIC_Stop();
 122   1      }
 123          void OLED_WR_Byte(unsigned dat,unsigned cmd)
 124          {
 125   1        if(cmd)
 126   1            {
 127   2      
 128   2         Write_IIC_Data(dat);
 129   2         
 130   2          }
 131   1        else {
 132   2         Write_IIC_Command(dat);
 133   2          
 134   2        }
 135   1      
 136   1      
 137   1      }
 138          
 139          /********************************************
 140          // fill_Picture
 141          ********************************************/
 142          void fill_picture(unsigned char fill_Data)
 143          {
 144   1        unsigned char m,n;
 145   1        for(m=0;m<8;m++)
 146   1        {
 147   2          OLED_WR_Byte(0xb0+m,0);   //page0-page1
 148   2          OLED_WR_Byte(0x02,0);   //low column start address
 149   2          OLED_WR_Byte(0x10,0);   //high column start address
 150   2          for(n=0;n<128;n++)
 151   2            {
 152   3              OLED_WR_Byte(fill_Data,1);
 153   3            }
 154   2        }
 155   1      }
 156          
 157          
 158          /***********************Delay****************************************/
 159          void Delay_50ms(unsigned int Del_50ms)
 160          {
 161   1        unsigned int m;
 162   1        for(;Del_50ms>0;Del_50ms--)
 163   1          for(m=6245;m>0;m--);
 164   1      }
 165          
 166          void Delay_1ms(unsigned int Del_1ms)
 167          {
 168   1        unsigned char j;
 169   1        while(Del_1ms--)
 170   1        { 
 171   2          for(j=0;j<123;j++);
 172   2        }
 173   1      }
 174          
 175          //坐标设置
 176          
 177            void OLED_Set_Pos(unsigned char x, unsigned char y) 
 178          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 4   

 179   1        OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 180   1        OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 181   1      }       
 182          //开启OLED显示    
 183          void OLED_Display_On(void)
 184          {
 185   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 186   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 187   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 188   1      }
 189          //关闭OLED显示     
 190          void OLED_Display_Off(void)
 191          {
 192   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 193   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 194   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 195   1      }            
 196          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 197          void OLED_Clear(void)  
 198          {  
 199   1        u8 i,n;       
 200   1        for(i=0;i<8;i++)  
 201   1        {  
 202   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 203   2          OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置―列低地址
 204   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 205   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 206   2        } //更新显示
 207   1      }
 208          void OLED_On(void)  
 209          {  
 210   1        u8 i,n;       
 211   1        for(i=0;i<8;i++)  
 212   1        {  
 213   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 214   2          OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置―列低地址
 215   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 216   2          for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 217   2        } //更新显示
 218   1      }
 219          //在指定位置显示一个字符,包括部分字符
 220          //x:0~127
 221          //y:0~63
 222          //mode:0,反白显示;1,正常显示         
 223          //size:选择字体 16/12 
 224          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size)
 225          {       
 226   1        unsigned char c=0,i=0;  
 227   1          c=chr-' ';//得到偏移后的值      
 228   1          if(x>Max_Column-1){x=0;y=y+2;}
 229   1          if(Char_Size ==16)
 230   1            {
 231   2            OLED_Set_Pos(x,y);  
 232   2            for(i=0;i<8;i++)
 233   2            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 234   2            OLED_Set_Pos(x,y+1);
 235   2            for(i=0;i<8;i++)
 236   2            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 237   2            }
 238   1            else {  
 239   2              OLED_Set_Pos(x,y);
 240   2              for(i=0;i<6;i++)
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 5   

 241   2              OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 242   2              
 243   2            }
 244   1      }
 245          //m^n函数
 246          u32 oled_pow(u8 m,u8 n)
 247          {
 248   1        u32 result=1;  
 249   1        while(n--)result*=m;    
 250   1        return result;
 251   1      }         
 252          //显示2个数字
 253          //x,y :起点坐标  
 254          //len :数字的位数
 255          //size:字体大小
 256          //mode:模式 0,填充模式;1,叠加模式
 257          //num:数值(0~4294967295);       
 258          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 size2)
 259          {           
 260   1        u8 t,temp;
 261   1        u8 enshow=0;               
 262   1        for(t=0;t<len;t++)
 263   1        {
 264   2          temp=(num/oled_pow(10,len-t-1))%10;
 265   2          if(enshow==0&&t<(len-1))
 266   2          {
 267   3            if(temp==0)
 268   3            {
 269   4              OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 270   4              continue;
 271   4            }else enshow=1; 
 272   3             
 273   3          }
 274   2          OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 275   2        }
 276   1      } 
 277          //显示一个字符号串
 278          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size)
 279          {
 280   1        unsigned char j=0;
 281   1        while (chr[j]!='\0')
 282   1        {   OLED_ShowChar(x,y,chr[j],Char_Size);
 283   2            x+=8;
 284   2          if(x>120){x=0;y+=2;}
 285   2            j++;
 286   2        }
 287   1      }
 288          //显示汉字
 289          void OLED_ShowCHinese(u8 x,u8 y,u8 no)
 290          {               
 291   1        u8 t,adder=0;
 292   1        OLED_Set_Pos(x,y);  
 293   1          for(t=0;t<16;t++)
 294   1          {
 295   2              OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 296   2              adder+=1;
 297   2           }  
 298   1          OLED_Set_Pos(x,y+1);  
 299   1          for(t=0;t<16;t++)
 300   1            { 
 301   2              OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 302   2              adder+=1;
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 6   

 303   2            }         
 304   1      }
 305          /***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7****************
             -*/
 306          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[
             -])
 307          {   
 308   1       unsigned int j=0;
 309   1       unsigned char x,y;
 310   1        
 311   1        if(y1%8==0) y=y1/8;      
 312   1        else y=y1/8+1;
 313   1        for(y=y0;y<y1;y++)
 314   1        {
 315   2          OLED_Set_Pos(x0,y);
 316   2          for(x=x0;x<x1;x++)
 317   2            {      
 318   3              OLED_WR_Byte(BMP[++j],OLED_DATA);       
 319   3            }
 320   2        }
 321   1      } 
 322          
 323          //初始化SSD1306             
 324          void OLED_Init(void)
 325          {   
 326   1       
 327   1        OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 328   1        OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 329   1        OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 330   1        OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 331   1        OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 332   1        OLED_WR_Byte(0x81,OLED_CMD); // contract control
 333   1        OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 334   1        OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 335   1        OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 336   1        OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 337   1        OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 338   1        OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 339   1        OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 340   1        OLED_WR_Byte(0x00,OLED_CMD);//
 341   1        
 342   1        OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 343   1        OLED_WR_Byte(0x80,OLED_CMD);//
 344   1        
 345   1        OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 346   1        OLED_WR_Byte(0x05,OLED_CMD);//
 347   1        
 348   1        OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 349   1        OLED_WR_Byte(0xF1,OLED_CMD);//
 350   1        
 351   1        OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 352   1        OLED_WR_Byte(0x12,OLED_CMD);//
 353   1        
 354   1        OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 355   1        OLED_WR_Byte(0x30,OLED_CMD);//
 356   1        
 357   1        OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 358   1        OLED_WR_Byte(0x14,OLED_CMD);//
 359   1        
 360   1        OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 361   1      }  
 362          
C51 COMPILER V9.60.0.0   OLED                                                              05/14/2020 10:12:40 PAGE 7   

 363          
 364          
 365          
 366          
 367          
 368          
 369          
 370          
 371          
 372          
 373          
 374          
 375          
 376          
 377          
 378          
 379          
 380          
 381          
 382          
 383          
 384          
 385          
 386          
 387          
 388          
 389          
 390          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1593    ----
   CONSTANT SIZE    =   2520    ----
   XDATA SIZE       =   ----      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
